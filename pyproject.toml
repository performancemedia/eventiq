[tool.poetry]
name = "eventiq"
version = "0.1.6"
description = "Cloud native framework for building event driven applications in Python."
authors = ["Radzim Kowalow <radzim.kowalow@performance-media.pl>"]
readme = "README.md"
license = "Apache License 2.0"
documentation = "https://performancemedia.github.io/eventiq/"
repository = "https://github.com/performancemedia/eventiq"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Framework :: AsyncIO",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries"
]

keywords = [
    "framework",
    "asyncio",
    "microservice",
    "event-driven"
]


[tool.poetry.scripts]
eventiq = "eventiq.cli:cli"

[tool.poetry.dependencies]
python = ">=3.8.1,<4.0"
pydantic = ">=1.0"
python-json-logger = ">=2.0"

# cli
aiorun = {version = "^2022.11.1", optional = true}
typer = {version = ">=0.7.0", optional = true}

# monitoring
prometheus-client = {version = ">=0.16.0,<1.0", optional = true}
opentelemetry-api = {version = "^1.17.0", optional = true}
opentelemetry-sdk = {version = "^1.17.0", optional = true}
opentelemetry-semantic-conventions = {version = "^0.38b0", optional = true}
# encoders
orjson = {version = ">=3.2.1,<=3.8.9", optional = true}
ormsgpack = {version = ">=1.2.5,<2.0", optional = true}

# brokers
aio-pika = {version = ">=9.0.4", optional = true}
nats-py = {version = ">=2.2,<3.0", optional = true}
aiokafka = {version = ">=0.8,<1.0", optional = true}
aioredis = {version = ">=2.0,<3.0", optional = true}
gcloud-aio-pubsub = {version = ">=5.2.0,<6.0", optional = true}

[tool.poetry.extras]
all = ["aiorun", "typer", "prometheus-client", "orjson", "ormsgpack", "nats-py", "aioredis", "aiokafka", "aio-pika",
    "gcloud-aio-pubsub", "opentelemetry-api", "opentelemetry-sdk", "opentelemetry-semantic-conventions"
]
common = ["aiorun", "typer", "prometheus-client", "orjson"]
cli = ["aiorun", "typer"]

# encoders
orjson = ["orjson"]
ormsgpack = ["ormsgpack"]
# observability
prometheus = ["prometheus-client"]
opentelemetry = ["opentelemetry-api", "opentelemetry-sdk", "opentelemetry-semantic-conventions"]
# backends
nats = ["nats-py"]
kafka = ["aiokafka"]
rabbitmq = ["aio-pika"]
redis = ["aioredis"]
pubsub = ["gcloud-aio-pubsub"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.1"
pytest-asyncio = "^0.20.2"
pytest-cov = "^4.0.0"
mypy = "^1.2.0"
black = "^22.3.0"
isort = "^5.10.1"
tox = "^3.25.0"
bandit = "^1.7.4"
fastapi = "^0.87.0"
uvicorn = "^0.19.0"
watchfiles = "^0.18.1"
python-semantic-release = "^7.33.2"
flake8 = "^6.0.0"
pyyaml = "^6.0"
ruff = "^0.0.264"
opentelemetry-exporter-otlp = "^1.17.0"
opentelemetry-instrumentation-logging = "^0.38b0"

[tool.poetry.group.docs.dependencies]
mkdocs-material = "^8.2.1"
mkdocs = "^1.4.2"
mkdocs-autorefs = "^0.4.1"
mkdocs-gen-files = "^0.4.0"
mkdocstrings-python = "^0.8.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = "--cov=./eventiq"
testpaths = [
   "./tests"
]
asyncio_mode = "auto"

[tool.mypy]
python_version = "3.11"
namespace_packages = true
ignore_missing_imports = true
no_site_packages = true

[tool.isort]
profile = "black"

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    #= "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
#    "C901",  # too complex
]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10


[tool.semantic_release]
version_variable = [
    'eventiq/_version.py:__version__',
]
version_toml = 'pyproject.toml:tool.poetry.version'
version_pattern = [
    'docs/index.md:Version: (\d+\.\d+\.\d+)',
    'README.md:Version: (\d+\.\d+\.\d+)'
]
upload_to_repository = false
major_on_zero = true
hvcs = "github"
commit_message = "Bump version: {version}"
tag_commit = false